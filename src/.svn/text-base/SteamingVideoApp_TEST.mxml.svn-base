<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="1280" height="720"
			   backgroundColor="0x000000"
			   creationComplete="init()" creationPolicy="all">
	<fx:Style source="SteamingVideoApp.css"/>
	
	<s:states>
		<s:State name="default"/>
		<s:State name="browse"/>
		<s:State name="results"/>
	</s:states>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.lnet.streamingvideo.data.CategoriesXMLLoader;
			import com.lnet.streamingvideo.events.ApplicationEvent;
			import com.lnet.streamingvideo.events.ApplicationEventBus;
			import com.lnet.streamingvideo.services.VideoService;
			import com.lnet.streamingvideo.viewmodels.BrowseViewModel;
			import com.lnet.streamingvideo.viewmodels.PlayerViewModel;
			import com.lnet.streamingvideo.viewmodels.SearchViewModel;
			import com.lnet.streamingvideo.views.BrowseView;
			import com.lnet.streamingvideo.views.PlayerView;
			import com.lnet.streamingvideo.views.SearchResultsView;
			import com.lnet.streamingvideo.views.SearchView;
			
			import mx.managers.FocusManager;
			
			import nl.demonsters.debugger.MonsterDebugger;
			
			private var searchView:SearchView;
			private var searchViewModel:SearchViewModel;
			private var searchResultsView:SearchResultsView;
			private var playerView:PlayerView;
			private var playerViewModel:PlayerViewModel;
			private var browseView:BrowseView;
			
			private var _videoService:VideoService;
			private var _categoriesXML:CategoriesXMLLoader;
			
			private function init():void {
				videoPlayer.source = "http://www.youtube.com/v/_OBlgSz8sSM?version=3&autoplay=1";
//				videoService = new VideoService();
//				categoriesXML = new CategoriesXMLLoader();
//				addEventListener(FocusEvent.FOCUS_IN, traceFocus, false, 0, true);
//				addEventListener(FocusEvent.FOCUS_OUT, traceFocus, false, 0, true);
//				searchViewModel = new SearchViewModel();
//				playerViewModel = new PlayerViewModel();
//				createSearchResultsView(searchViewModel);
//				createBrowseView();
//				createPlayerView();
//				ApplicationEventBus.getInstance().dispatchEvent(new ApplicationEvent(ApplicationEvent.SET_FOCUS_TO_CATEGORIES));
//				MonsterDebugger.trace("","Dispatching set focus listener");
			}
			
			private function traceFocus(e:FocusEvent):void {
				MonsterDebugger.trace("Main::traceFocus","Focus::"+e.target);
			}
			
//			private function createSearchView(vm:SearchViewModel):void {
//				searchView = new SearchView();
//				searchView.searchViewModel = vm;
//				searchBoxContainer.addElement(searchView);
//			}
			
//			private function createSearchResultsView(vm:SearchViewModel):void {
//				searchResultsView = new SearchResultsView();
//				searchResultsView.searchViewModel = vm;
//				resultlist.addElement(searchResultsView);
//			}
						
//			private function createPlayerView():void {
//				playerView = new PlayerView();
//				playerView.playerViewModel = playerViewModel;
//				container.addElement(playerView);
//			}
			
//			private function createBrowseView():void {
//				browseView = new BrowseView();
//				browseView.browseViewModel = new BrowseViewModel();
//				categorylist.addElement(browseView);
//			}
			
			public function get videoService():VideoService {
				return _videoService;
			}
			
			public function set videoService(value:VideoService):void {
				_videoService = value;
			}
			
			public function get categoriesXML():CategoriesXMLLoader {
				return _categoriesXML;
			}
			
			public function set categoriesXML(value:CategoriesXMLLoader):void {
				_categoriesXML = value;
			}

			private function doNothing():void {
				// do nothing
			}
			
		]]>
	</fx:Script>
	
	<mx:SWFLoader id="videoPlayer"
				  width="1280" height="720"
				  depth="0" x="0" y="0" />
	<s:BorderContainer depth="1" x="0" y="0" width="1280" height="720" backgroundColor="0x000000" click="{doNothing()}" borderVisible="false" backgroundAlpha="0"/>
	
	<!-- <s:BorderContainer id="container"
					   width="1280" height="720"
					   borderVisible="false" backgroundImage="@Embed(source='assets/Texture.png')">
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		<s:BorderContainer id="categorylist"
						   width="323" height="720"
						   borderVisible="false"
						   backgroundImage="@Embed(source='assets/LeftPanelBackground.png')"/>
		<s:BorderContainer id="rightpane"
						   width="75%" height="100%"
						   backgroundAlpha="0"
						   borderVisible="false">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
			<s:Group id="searchbar" height="100" width="100%"/>
			<s:Group id="resultlist" height="100%" width="100%"/>
		</s:BorderContainer>
	</s:BorderContainer> -->
</s:Application>
