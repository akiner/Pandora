<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   width="1280" height="720"
				   backgroundImage="@Embed(source='assets/Texture.png')"
				   backgroundAlpha="1">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:states>
		<s:State name="default"/>
		<s:State name="paused"/>
		<s:State name="finished"/>
	</s:states>
	<fx:Script>
		<![CDATA[
			import com.demonsters.debugger.MonsterDebugger;
			import com.lnet.streamingvideo.events.ApplicationEvent;
			import com.lnet.streamingvideo.events.ApplicationEventBus;
			import com.lnet.streamingvideo.viewmodels.PlayerViewModel;
			
			private var _player:Object;
			private var _playerViewModel:PlayerViewModel;
			private var resetTimer:Timer;
			private var playheadTimer:Timer;
			private var scrubBarTimer:Timer;
			private var scrubBarMC:MovieClip;
			
			[Bindable]
			private var currentTimeLabel:String;
			
			[Embed(source="assets/skipBack_off.png")]
			[Bindable]
			private var skipBack:Class;
			
			[Embed(source="assets/skipBack_on.png")]
			[Bindable]
			private var skipBackOn:Class;
			
			[Embed(source="assets/skipFwd_off.png")]
			[Bindable]
			private var skipForward:Class;
			
			[Embed(source="assets/skipFwd_on.png")]
			[Bindable]
			private var skipForwardOn:Class;
			
			private static const SEEK_INTERVAL:Number = 15;
			
			private function onLoaderInit(event:Event):void {
				resetTimer = new Timer(250, 1);
				playheadTimer = new Timer(1000);
				scrubBarTimer = new Timer(250);
				loader.content.addEventListener("onReady", onPlayerReady);
				loader.content.addEventListener("onError", onPlayerError);
				loader.content.addEventListener("onStateChange", onStateChange);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.VIDEO_SELECTED, cueNewVideo, false, 0, true);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.PLAY_VIDEO, playVideo, false, 0, true);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.PAUSE_VIDEO, pauseVideo, false, 0, true);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.STOP_VIDEO, pauseVideo, false, 0, true);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.SKIP_BACK_VIDEO, skipBackVideo, false, 0, true);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.SKIP_FORWARD_VIDEO, skipForwardVideo, false, 0, true);
			}

			private function cueNewVideo(event:ApplicationEvent):void {
				MonsterDebugger.trace("PlayerView::cueNewVideo","Cueing video id::"+playerViewModel.selectedVideo.videoID);
				player.cueVideoById(playerViewModel.selectedVideo.videoID, 0, "default");
			}
			
			private function stopVideo(event:ApplicationEvent=null):void {
				player.stopVideo();
				playheadTimer.removeEventListener(TimerEvent.TIMER, updatePlayhead);
			}

			private function pauseVideo(event:ApplicationEvent=null):void {
				currentState = "paused";
				player.pauseVideo();
			}

			private function playVideo(event:ApplicationEvent=null):void {
				currentState = "default";
				player.playVideo();
			}
			
			private function skipBackVideo(event:ApplicationEvent):void {
				skipBackButton.source = skipBackOn;
				var seekToTime:Number = player.getCurrentTime() - SEEK_INTERVAL;
				player.seekTo(seekToTime, true);
				resetTimer.addEventListener(TimerEvent.TIMER, resetSkipBackButton, false, 0, true);
				resetTimer.start();
			}
			
			private function resetSkipBackButton(event:TimerEvent):void {
				resetTimer.removeEventListener(TimerEvent.TIMER, resetSkipBackButton);
				skipBackButton.source = skipBack;
			}

			private function skipForwardVideo(event:ApplicationEvent):void {
				skipForwardButton.source = skipForwardOn;
				var seekToTime:Number = player.getCurrentTime() + SEEK_INTERVAL;
				player.seekTo(seekToTime, true);
				resetTimer.addEventListener(TimerEvent.TIMER, resetSkipFwdButton, false, 0, true);
				resetTimer.start();
			}
			
			private function resetSkipFwdButton(event:TimerEvent):void {
				resetTimer.removeEventListener(TimerEvent.TIMER, resetSkipFwdButton);
				skipForwardButton.source = skipForward;
			}
			
			private function onStateChange(event:Event):void {
				switch(Object(event).data) {
					case 5:
						MonsterDebugger.trace("PlayerView::onStateChange","The video is cued and ready to play");
						displayRelatedVideos();
						errorTxt.text = "";
						playheadTimer.addEventListener(TimerEvent.TIMER, updatePlayhead, false, 0, true);
						playheadTimer.start();
						scrubBarTimer.addEventListener(TimerEvent.TIMER, updateScrubber, false, 0, true);
						scrubBarTimer.start();
						playVideo();
						break;
					case 0:
						MonsterDebugger.trace("PlayerView::onStateChange","The video has finished playing");
						displayRelatedVideos();
						break;
					default:
						MonsterDebugger.trace("PlayerView::onStateChange","Didn't catch this player state::"+Object(event).data);
						break;
				}
			}

			private function updatePlayhead(event:TimerEvent):void {
				var videoLength:String = formatVideoTime(playerViewModel.selectedVideo.duration);
				var currentTime:String = formatVideoTime(player.getCurrentTime());
				var label:String = currentTime + "/" + videoLength;
				timeLabel.text = label;
			}
			
			private function updateScrubber(event:TimerEvent):void {
				var currentTimeNum:Number = player.getCurrentTime() as Number;
				var pctPlayed:Number = Math.round((currentTimeNum / Number(playerViewModel.selectedVideo.duration)) * 100);
				MonsterDebugger.trace("PlayerView::udpateScrubber","pctPlayed::"+pctPlayed * 5);
				scrubBarMC.gotoAndStop(pctPlayed*5);
			}
			
			private function onPlayerReady(event:Event):void {
				MonsterDebugger.trace("player ready:", Object(event).data);
				player = loader.content;
				player.setSize(1080, 608);
			}
			
			private function onPlayerError(event:Event):void {
				playheadTimer.removeEventListener(TimerEvent.TIMER, updatePlayhead);
				scrubBarTimer.removeEventListener(TimerEvent.TIMER, updateScrubber);
				MonsterDebugger.trace("player error:", Object(event).data);
				var errorMsg:String;
				scrubBarMC.gotoAndStop(0);
				timeLabel.text = "";
				switch(Object(event).data) {
					case 150:
					case 101:
						errorMsg = "Syndication of this video was restricted by the content owner.";
						break;
					case 100:
						errorMsg = "Video not found. This video has either been removed or marked private.";
					default:
						errorMsg = "An unknown error has occurred. Please press back to return to the results list";
						break;
				}
				errorTxt.text = errorMsg;
			}
			
			private function displayRelatedVideos():void {
				currentState = "finished";
				ApplicationEventBus.getInstance().dispatchEvent(new ApplicationEvent(ApplicationEvent.RELATED_VIDEOS_REQUESTED,
					playerViewModel.selectedVideo.relatedVideoURL));
				relatedVideosList.selectedIndex = 0;
			}
			
			private function formatVideoTime(time:String):String {
				var timeNum:Number = Number(time);
				timeNum = Math.round(timeNum);
				var minutes:int = timeNum / 60;
				var seconds:int = timeNum % 60; 
				var timeString:String;
				var formattedMinutes:String;
				var formattedSeconds:String;
				
				if(seconds < 10) {
					formattedSeconds = "0" + seconds;
				} else {
					formattedSeconds = String(seconds);
				}
				
				if(minutes < 10) {
					formattedMinutes = "0" + minutes;
				} else {
					formattedMinutes = String(minutes);
				}
				
				timeString = formattedMinutes + ":" + formattedSeconds;
				return timeString;
			}
			
			private function initScrubber():void {
				scrubBarMC = scrubBarLoader.content as MovieClip;
			}
			
			[Bindable]
			public function get playerViewModel():PlayerViewModel {
				return _playerViewModel;
			}

			public function set playerViewModel(value:PlayerViewModel):void {
				_playerViewModel = value;
			}

			public function get player():Object {
				return _player;
			}

			public function set player(value:Object):void {
				_player = value;
			}

		]]>
	</fx:Script>
	<s:BorderContainer id="endOfVideoOverlay"
					   depth="1"
					   visible="false"
					   visible.finished="true"
					   width="1025" height="580"
					   horizontalCenter="0" top="60"
					   backgroundColor="0x000000" backgroundAlpha=".75"
					   cornerRadius="20">
		<mx:Image source="@Embed(source='assets/replay.png')" top="40" left="40"/>
		<s:Label text="Similar Videos" top="165" left="90"/>
		<s:List id="relatedVideosList"
				dataProvider="{playerViewModel.relatedVideos}"
				focusAlpha="0"
				requireSelection="true"
				width="100%"
				borderVisible="false"
				contentBackgroundAlpha="0"
				top="195" left="60"
				itemRenderer="com.lnet.streamingvideo.views.SearchResultsItemRenderer">
			<s:layout>
				<s:TileLayout
					requestedColumnCount="4"
					requestedRowCount="1"
					horizontalGap="0"
					verticalGap="2"/>
			</s:layout>
		</s:List>
	</s:BorderContainer>
	<s:BorderContainer depth="1" width="1080" height="620" horizontalCenter="0">
		<s:Label id="errorTxt"
				 verticalCenter="0"
				 horizontalCenter="0"
				 styleName="errorTxt"
				 textAlign="center"/>
	</s:BorderContainer>
	<mx:SWFLoader id="loader"
				  depth="0"
				  top="43" left="98"
				  source="{playerViewModel.playerSource}"
				  init="onLoaderInit(event)"/>
	<s:BorderContainer id="footerBar"
					   depth="1"
					   bottom="34" left="98"
					   width="1080" height="37"
					   backgroundAlpha="1"
					   backgroundColor="0x000000">
		<s:HGroup id="playerControls"
				  width="1080" right="0" verticalAlign="middle" paddingLeft="10" paddingTop="4">
			<mx:SWFLoader id="scrubBarLoader"
						  complete="initScrubber()"
						  source="assets/scrubBar.swf"
						  left="50"
						  width="693" height="17"/>
			<s:Label id="timeLabel"
					 styleName="videoPlayerLabel" width="180" paddingLeft="50"/>
			<mx:Image id="playButton"
					  source="@Embed(source='assets/play_on.png')"
					  source.paused="@Embed(source='assets/play_off.png')"/>
			<mx:Image id="pauseButton"
					  source="@Embed(source='assets/pause_off.png')"
					  source.paused="@Embed(source='assets/pause_on.png')"/>
			<mx:Image id="skipBackButton"
					  source="{skipBack}"/>
			<mx:Image id="skipForwardButton"
					  source="{skipForward}"/>
		</s:HGroup>
	</s:BorderContainer>
</s:BorderContainer>
