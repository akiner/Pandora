<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   width="1280" height="720"
				   backgroundImage="@Embed(source='assets/Texture.png')"
				   backgroundAlpha="1">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:states>
		<s:State name="default"/>
		<s:State name="paused"/>
	</s:states>
	<fx:Script>
		<![CDATA[
			import com.demonsters.debugger.MonsterDebugger;
			import com.lnet.streamingvideo.events.ApplicationEvent;
			import com.lnet.streamingvideo.events.ApplicationEventBus;
			import com.lnet.streamingvideo.viewmodels.PlayerViewModel;
			
			private var _player:Object;
			private var _playerViewModel:PlayerViewModel;
			[Bindable]
			private var currentTimeLabel:String;
			
			private function onLoaderInit(event:Event):void {
				loader.content.addEventListener("onReady", onPlayerReady);
				loader.content.addEventListener("onError", onPlayerError);
				loader.content.addEventListener("onStateChange", onStateChange);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.VIDEO_SELECTED, cueNewVideo, false, 0, true);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.PLAY_VIDEO, playVideo, false, 0, true);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.PAUSE_VIDEO, pauseVideo, false, 0, true);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.STOP_VIDEO, pauseVideo, false, 0, true);
			}

			private function cueNewVideo(event:ApplicationEvent):void {
				MonsterDebugger.trace("PlayerView::cueNewVideo","Cueing video id::"+playerViewModel.selectedVideo.videoID);
				player.cueVideoById(playerViewModel.selectedVideo.videoID, 0, "hd720");
			}
			
			private function stopVideo(event:ApplicationEvent=null):void {
				player.stopVideo();
			}

			private function pauseVideo(event:ApplicationEvent=null):void {
				currentState = "paused";
				player.pauseVideo();
			}

			private function playVideo(event:ApplicationEvent=null):void {
				currentState = "default";
				player.playVideo();
			}
			
			private function onStateChange(event:Event):void {
				switch(Object(event).data) {
					case 5:
						MonsterDebugger.trace("PlayerView::onStateChange","The video is cued and ready to play");
						playVideo();
						break;
					case 0:
						MonsterDebugger.trace("PlayerView::onStateChange","The video has finished playing");
						break;
					default:
						MonsterDebugger.trace("PlayerView::onStateChange","Didn't catch this player state::"+Object(event).data);
						break;
				}
			}
			
			private function onPlayerReady(event:Event):void {
				MonsterDebugger.trace("player ready:", Object(event).data);
				player = loader.content;
				player.setSize(1080, 608);
			}
			
			private function onPlayerError(event:Event):void {
				MonsterDebugger.trace("player error:", Object(event).data);
			}
			
			[Bindable]
			public function get playerViewModel():PlayerViewModel {
				return _playerViewModel;
			}

			public function set playerViewModel(value:PlayerViewModel):void {
				_playerViewModel = value;
			}

			public function get player():Object {
				return _player;
			}

			public function set player(value:Object):void {
				_player = value;
			}
		]]>
	</fx:Script>
	<mx:SWFLoader id="loader"
				  depth="0"
				  top="43" left="98"
				  source="{playerViewModel.playerSource}"
				  init="onLoaderInit(event)"/>
	<s:BorderContainer id="footerBar"
					   depth="1"
					   bottom="34" left="98"
					   width="1080" height="37"
					   backgroundAlpha="1"
					   backgroundColor="0x000000">
		<s:HGroup id="playerControls"
				  width="300" right="0">
			<mx:Image source.default="@Embed(source='assets/play_on.png')"
					  source.paused="@Embed(source='assets/play_off.png')"/>
			<mx:Image source.default="@Embed(source='assets/pause_off.png')"
					  source.paused="@Embed(source='assets/pause_on.png')"/>
			<mx:Image source="@Embed(source='assets/skipBack_off.png')"/>
			<mx:Image source="@Embed(source='assets/skipFwd_off.png')"/>
		</s:HGroup>
	</s:BorderContainer>
</s:BorderContainer>
