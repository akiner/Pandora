<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="100%" x="0" y="0">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.demonsters.debugger.MonsterDebugger;
			import com.lnet.streamingvideo.viewmodels.PlayerViewModel;
			
			private var _player:Object;
			private var _playerViewModel:PlayerViewModel;
			
			private function onLoaderInit(event:Event):void {
				loader.content.addEventListener("onReady", onPlayerReady);
				loader.content.addEventListener("onError", onPlayerError);
				loader.content.addEventListener("onStateChange", onPlayerStateChange);
				loader.content.addEventListener("onPlaybackQualityChange", 
					onVideoPlaybackQualityChange);
			}
			
			private function onPlayerReady(event:Event):void {
				// Event.data contains the event parameter, which is the Player API ID 
				MonsterDebugger.trace("player ready:", Object(event).data);
				
				// Once this event has been dispatched by the player, we can use
				// cueVideoById, loadVideoById, cueVideoByUrl and loadVideoByUrl
				// to load a particular YouTube video.
				player = loader.content;
				// Set appropriate player dimensions for your application
				player.setSize(1280, 720);
			}
			
			private function onPlayerError(event:Event):void {
				// Event.data contains the event parameter, which is the error code
				MonsterDebugger.trace("player error:", Object(event).data);
			}
			
			private function onPlayerStateChange(event:Event):void {
				// Event.data contains the event parameter, which is the new player state
				MonsterDebugger.trace("player state:", Object(event).data);
			}
			
			private function onVideoPlaybackQualityChange(event:Event):void {
				// Event.data contains the event parameter, which is the new video quality
				MonsterDebugger.trace("video quality:", Object(event).data);
			}
			
			[Bindable]
			public function get playerViewModel():PlayerViewModel {
				return _playerViewModel;
			}

			public function set playerViewModel(value:PlayerViewModel):void {
				_playerViewModel = value;
			}

			public function get player():Object {
				return _player;
			}

			public function set player(value:Object):void {
				_player = value;
			}

		]]>
	</fx:Script>
	<mx:SWFLoader id="loader"
				  source="http://www.youtube.com/apiplayer?version=3"
				  init="onLoaderInit(event)"/>
	<!--<s:HGroup>
		<s:Label text="Author:"/>
		<s:Label text="{playerViewModel.author}" />
	</s:HGroup>
	<s:HGroup>
		<s:Label text="Views:"/>		
		<s:Label text="{playerViewModel.selectedVideo.views}" />
	</s:HGroup>
	<s:HGroup>
		<s:Label text="Added:"/>		
		<s:Label text="{playerViewModel.selectedVideo.published}" />
	</s:HGroup>-->
</s:Group>
