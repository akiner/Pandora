<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="515" height="265" borderAlpha="1" top="67" left="7"
		 creationComplete="init()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.demonsters.debugger.MonsterDebugger;
			import com.lnet.pandora.events.ApplicationEvent;
			import com.lnet.pandora.events.ApplicationEventBus;
			
			private var key:String;
			
			private function init():void {
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.INIT_OPTIONS_MENU, setInitialFocus);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.KEY_PRESS_IN_RATING, handleKeyPress);
			}

			private function setInitialFocus(event:ApplicationEvent):void {
				currentState = "thumbUp";
			}
			
			private function handleKeyPress(event:ApplicationEvent):void {
				key = event.data as String;
				switch(currentState){
					case "thumbUp":
						handleKeyPressInThumbUpView();
						break;
					case "tiredOfIt":
						handleKeyPressInTiredOfItView();
						break;
					case "thumbDown":
						handleKeyPressInThumbDownView();
						break;
					default:
						break;
				}
			}
			
			private function handleKeyPressInThumbUpView():void {
				switch(key){
					case "downArrow":
						currentState = "tiredOfIt";
						break;
					case "select":
						currentState = "thumbUp";
						ApplicationEventBus.getInstance().dispatchEvent(new ApplicationEvent(ApplicationEvent.RATE_SONG, true));
						break;
					default:
						MonsterDebugger.trace("RatingView::handleKeyPress","ERROR:: KEY NOT HANDLED");
						break;
				}
			}
			
			private function handleKeyPressInTiredOfItView():void {
				switch(key){
					case "upArrow":
						currentState = "thumbUp";
						break;
					case "downArrow":
						currentState = "thumbDown";
						break;
					case "select":
						ApplicationEventBus.getInstance().dispatchEvent(new ApplicationEvent(ApplicationEvent.SLEEP_SONG));
						break;
					default:
						MonsterDebugger.trace("RatingView::handleKeyPress","ERROR:: KEY NOT HANDLED");
						break;
				}
			}

			private function handleKeyPressInThumbDownView():void {
				switch(key){
					case "upArrow":
						currentState = "tiredOfIt";
						break;
					case "select":
						ApplicationEventBus.getInstance().dispatchEvent(new ApplicationEvent(ApplicationEvent.RATE_SONG, false));
						break;
					default:
						MonsterDebugger.trace("RatingView::handleKeyPress","ERROR:: KEY NOT HANDLED");
						break;
				}
			}

		]]>
	</fx:Script>
	<s:states>
		<s:State name="thumbUp"/>
		<s:State name="tiredOfIt"/>
		<s:State name="thumbDown"/>
	</s:states>
	<s:layout>
		<s:VerticalLayout paddingTop="37" horizontalAlign="center"/>
	</s:layout>
	<mx:Image source.thumbUp="@Embed(source='assets/thumbUp_check.png')"
			  source.thumbDown="@Embed(source='assets/thumbUp.png')"
			  source.tiredOfIt="@Embed(source='assets/thumbUp.png')"/>
	<mx:Image source="@Embed(source='assets/option_divider.png')" includeIn="thumbUp"/>
	<s:Label text="I am tired of this song"
			 styleName="whiteLabelLg" alpha.thumbUp=".2" alpha.thumbDown=".2">
		<s:filters>
			<s:GlowFilter includeIn="tiredOfIt"
						  color="#2f97ff"
						  alpha="0.5"
						  blurX="11" blurY="11"
						  inner="false"
						  strength="6"
						  quality="1"/>
		</s:filters>
	</s:Label>
	<mx:Image source="@Embed(source='assets/option_divider.png')" includeIn="tiredOfIt"/>
	<mx:Image source.thumbUp="@Embed(source='assets/thumbDown.png')"
			  source.tiredOfIt="@Embed(source='assets/thumbDown.png')"
			  source.thumbDown="@Embed(source='assets/thumbDown_check.png')"/>
	<mx:Image source="@Embed(source='assets/option_divider.png')" includeIn="thumbDown"/>
</s:BorderContainer>
