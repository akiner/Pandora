<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false">
	
	<fx:Script>
		<![CDATA[
			import com.demonsters.debugger.MonsterDebugger;
			[Embed(source="assets/bkgd_song_off.png")]
			[Bindable]
			private var backgroundOff:Class;
			
			[Embed(source="assets/bkgd_song_on.png")]
			[Bindable]
			private var backgroundOn:Class;
			
			[Embed(source="assets/thumbUp_playing.png")]
			[Bindable]
			private var thumbUpPlaying:Class;
			
			[Embed(source="assets/thumbDown_playing.png")]
			[Bindable]
			private var thumbDownPlaying:Class;
			
			[Embed(source="assets/thumbUp_past.png")]
			[Bindable]
			private var thumbUpPast:Class;
			
			[Embed(source="assets/thumbDown_past.png")]
			[Bindable]
			private var thumbDownPast:Class;
			
			private function getAlbumArt(url:String):String{
				var artURL:String = url;
				
				if(url == "" || url == "undefined"){
					artURL = "assets/albumArtUnavailable.png";
				}
				
				return artURL;
			}
			
			private function getThumb(rating:int, state:String):Class{
				var thumbClass:Class;
				
				switch(rating) {
					case -1:
						if(state != "selected"){
							thumbClass = thumbDownPast;
						} else {
							thumbClass = thumbDownPlaying;
						}
						break;
					case 1:
						if(state != "selected"){
							thumbClass = thumbUpPast;
						} else {
							thumbClass = thumbUpPlaying;
						}
						break;
				}
				return thumbClass;
			}
		]]>
	</fx:Script>
	
	<s:states> 
		<s:State name="default"/> 
		<s:State name="selected"/>
	</s:states>
	
	<s:BorderContainer id="container"
					   backgroundAlpha="1"
					   backgroundImage.default="{backgroundOff}"
					   backgroundImage.selected="{backgroundOn}"
					   width.default="446" height.default="312"
					   width.selected="596" height.selected="312"
					   top="20">
		<s:VGroup paddingTop="36" paddingLeft="31">
			<s:Label id="songTitle" styleName="whiteLabelLg" text="{data.songName}"
					 maxWidth.default="375" maxWidth.selected="525" maxDisplayedLines="1"/>
			<s:HGroup>
				<s:Label styleName="blueLabelMed" text="by:" left="5"/>
				<s:Label styleName="whiteLabelMed" text="{data.artistName}"
						 maxWidth.default="340" maxWidth.selected="485" maxDisplayedLines="1"/>
			</s:HGroup>
			<s:HGroup>
				<s:Label styleName="blueLabelMed" text="on:" left="5"/>
				<s:Label styleName="whiteLabelMed" text="{data.albumName}"
						 maxWidth.default="340" maxWidth.selected="485" maxDisplayedLines="1"/>
			</s:HGroup>
			<s:HGroup gap="0" width="359">
				<s:BorderContainer borderVisible="true" borderAlpha="1" borderColor="0x6096cb" borderWeight="2">
					<mx:Image id="albumArt" styleName="albumArt"
							  height="187" width="187"
							  source="{getAlbumArt(data.albumArtUrl.toString())}"/>
				</s:BorderContainer>
				<s:VGroup horizontalAlign="center" paddingTop="10">
					<mx:Image depth="1" height="43" source="@Embed(source='assets/selectBanner.png')"
							  visible.default="false" visible.selected="true"/>
					<mx:Spacer height="32" width="1"/>
					<mx:Image source="@Embed(source='assets/controls.png')" horizontalCenter="0"
							  visible.default="false" visible.selected="true"/>
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>
		<mx:Image id="thumb" source="{getThumb(data.songRating, currentState)}" right="25" bottom="22"/>
	</s:BorderContainer>
	
</s:ItemRenderer>
