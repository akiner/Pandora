<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false" initialize="init()">
	
	<fx:Script>
		<![CDATA[
			import com.demonsters.debugger.MonsterDebugger;
			import com.lnet.pandora.events.ApplicationEvent;
			import com.lnet.pandora.events.ApplicationEventBus;
			import com.lnet.pandora.response.station.supportClasses.Track;
			
			[Embed(source="assets/bkgd_song_off.png")]
			[Bindable]
			private var backgroundOff:Class;
			
			[Embed(source="assets/bkgd_song_on.png")]
			[Bindable]
			private var backgroundOn:Class;
			
//			private var scrubBarMC:MovieClip;
//			private var soundInstance:Sound;
//			private var soundChannelInstance:SoundChannel;
//			private var soundPosition:Number;
			
//			private function playSong(event:ApplicationEvent):void {
//				MonsterDebugger.trace("Controller::playSong","Play song");
//				soundChannelInstance = soundInstance.play(soundPosition);
//			}
//			
//			private function pauseSong(event:ApplicationEvent):void {
//				MonsterDebugger.trace("Controller::pauseSong","Pause song");
//				soundPosition = soundChannelInstance.position;
//			}
			
			private function init():void {
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.PLAY_SONG, removePauseGraphic, 
					false, 0, true);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.PAUSE_SONG, showPauseGraphic, 
					false, 0, true);
//				MonsterDebugger.trace("SongListItemRenderer::init","Listening for track ready event");
//				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.TRACK_READY_TO_PLAY, playTrack, false, 0, true);
//				ApplicationEventBus.getInstance().dispatchEvent(new ApplicationEvent(ApplicationEvent.SONG_LIST_INITIALIZED));
			}

//			private function playTrack(track:Track):void {
//				MonsterDebugger.trace("SongListItemRenderer::playTrack","Attempting to play track");
//				try	{
//					if (soundChannelInstance)
//						soundChannelInstance.stop();
//					
//					if (soundInstance)
//						soundInstance.close();
//				} catch (e:Error) {
//					MonsterDebugger.trace("SongListItemRenderer::playTrack","sound channel stop error " + e);
//				}
//				
//				if(!track) return;
//				
//				soundInstance = new Sound();
//				
//				soundInstance.addEventListener(IOErrorEvent.IO_ERROR, ioSoundError);
//				soundInstance.addEventListener(Event.COMPLETE, soundLoaded);
//				
//				var req:URLRequest =  new URLRequest(track.audioUrl);
//				var context:SoundLoaderContext = new SoundLoaderContext(0, false);
//				
//				try {
//					soundInstance.load(req, context);
//					soundChannelInstance = soundInstance.play();
//					soundChannelInstance.addEventListener(Event.SOUND_COMPLETE, playNextSong);
//					ApplicationEventBus.getInstance().dispatchEvent(new ApplicationEvent(ApplicationEvent.SONG_LOADED, track));
//				}
//				catch (err:Error) {
//					MonsterDebugger.trace("SongListItemRenderer::playTrack","ERROR::"+err.message);
//				}
//			}

//			private function soundLoaded(event:Event):void {
//				var currentTime:uint = Math.round(soundChannelInstance.position/1000);
//				var totalTime:uint = Math.round(soundInstance.length/1000);
//				MonsterDebugger.trace("SongListItemRenderer::soundLoaded","sound length::"+totalTime);
//				MonsterDebugger.trace("SongListItemRenderer::soundLoaded","current position::"+currentTime);
//			}
			
//			private function ioSoundError(e:IOErrorEvent):void {
//				MonsterDebugger.trace("PandoraStandalone::ioSoundError","sound channel ioSoundError " + e.text);
//				playNextSong();
//			}
//			
//			private function playNextSong(e:Event=null):void {
//				ApplicationEventBus.getInstance().dispatchEvent(new ApplicationEvent(ApplicationEvent.NEW_TRACK_REQUESTED));
//			}
			
//			private function initScrubber():void {
//				scrubBarMC = scrubBarLoader.content as MovieClip;
//			}

			private function removePauseGraphic(event:ApplicationEvent):void {
				pause.visible = false;
			}

			private function showPauseGraphic(event:ApplicationEvent):void {
				pause.visible = true;
			}
			
			private function getAlbumArt(url:String):String{
				var artURL:String = url;
				
				if(url == "" || url == "undefined"){
					artURL = "assets/albumArtUnavailable.png";
				}
				
				return artURL;
			}
		]]>
	</fx:Script>
	
	<s:states> 
		<s:State name="default"/> 
		<s:State name="selected"/>
	</s:states>
	
	<mx:Image id="pause" visible="false" includeIn="selected"
			  source="@Embed(source='assets/pause.png')"
			  depth="3" horizontalCenter="0" />
	<!--<mx:SWFLoader id="scrubBarLoader"
				  complete="initScrubber()"
				  source="assets/scrubBar.swf"
				  top="20" depth="2"
				  horizontalCenter="0"
				  visible.selected="true" visible.default="false"
				  width="353" height="23"/>-->
	<s:BorderContainer id="container"
					   backgroundAlpha="1"
					   backgroundImage.default="{backgroundOff}"
					   backgroundImage.selected="{backgroundOn}"
					   width.default="446" height.default="312"
					   width.selected="596" height.selected="312"
					   top="20">
		<s:VGroup paddingTop="36" paddingLeft="31">
			<s:Label id="songTitle" styleName="whiteLabelLg" text="{data.songName}"
					 maxWidth.default="375" maxWidth.selected="525" maxDisplayedLines="1"/>
			<s:HGroup>
				<s:Label styleName="blueLabelMed" text="by:" left="5"/>
				<s:Label styleName="whiteLabelMed" text="{data.artistName}"
						 maxWidth.default="340" maxWidth.selected="485" maxDisplayedLines="1"/>
			</s:HGroup>
			<s:HGroup>
				<s:Label styleName="blueLabelMed" text="on:" left="5"/>
				<s:Label styleName="whiteLabelMed" text="{data.albumName}"
						 maxWidth.default="340" maxWidth.selected="485" maxDisplayedLines="1"/>
			</s:HGroup>
			<s:HGroup gap="0" width="359">
				<s:BorderContainer borderVisible="true" borderAlpha="1" borderColor="0x6096cb" borderWeight="2">
					<mx:Image id="albumArt" height="187" width="187" source="{getAlbumArt(data.albumArtUrl.toString())}" styleName="albumArt"/>
				</s:BorderContainer>
				<s:VGroup horizontalAlign="center" paddingTop="10">
					<mx:Image depth="1" height="43" source="@Embed(source='assets/selectBanner.png')"
							  visible.default="false" visible.selected="true"/>
					<mx:Spacer height="32" width="1"/>
					<mx:Image source="@Embed(source='assets/controls.png')" horizontalCenter="0"
							  visible.default="false" visible.selected="true"/>
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>
	</s:BorderContainer>
	
</s:ItemRenderer>
