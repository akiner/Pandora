<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:views="com.lnet.pandora.views.*"
		 xmlns:layouts="com.lnet.pandora.layouts.*"
		 creationComplete="init()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.demonsters.debugger.MonsterDebugger;
			import com.lnet.pandora.events.ApplicationEvent;
			import com.lnet.pandora.events.ApplicationEventBus;
			import com.lnet.pandora.viewmodels.SongListViewModel;
			
			private var _songListViewModel:SongListViewModel;
			private var scrubBarMC:MovieClip;
			private var soundInstance:Sound;
			private var soundChannelInstance:SoundChannel;
			private var soundPosition:Number;
			private var playheadTimer:Timer;
			private var scrubBarTimer:Timer;
			private var currentTime:uint;
			private var totalTime:uint;
			
			[Bindable]
			private var currentTimeLabel:String;
			
			private function init():void {
				initTimers();
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.UPDATE_SELECTED_INDEX, updateSelectedIndex,
					false, 0, true);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.PLAY_SONG, removePauseGraphic, 
					false, 0, true);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.PAUSE_SONG, showPauseGraphic, 
					false, 0, true);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.SOUND_READY, initSoundInstances,
					false, 0, true)
			}
			
			private function initTimers():void {
				playheadTimer = new Timer(1000);
				scrubBarTimer = new Timer(250);
				playheadTimer.addEventListener(TimerEvent.TIMER, updatePlayhead, false, 0, true);
				scrubBarTimer.addEventListener(TimerEvent.TIMER, updateScrubber, false, 0, true);
			}
			
			private function initSoundInstances(event:ApplicationEvent):void {
				soundInstance = event.data as Sound;
				soundChannelInstance = event.optionalData as SoundChannel;
				currentTime =  Math.round(soundChannelInstance.position/1000);
				totalTime = soundInstance.length/1000;
				totalTimeField.text = formatTime(totalTime);
				startTimers();
			}

			private function startTimers():void {
				playheadTimer.start();
				scrubBarTimer.start();
			}
			
			private function pauseTimers():void {
				playheadTimer.stop();
				scrubBarTimer.stop();
			}

			private function updateSelectedIndex(event:ApplicationEvent):void {
				songList.selectedItem = event.data;
				pause.visible = false;
				resetTimeFields();
			}
			
			private function removeScrollbars():void {
				songList.scroller.setStyle("horizontalScrollPolicy","ScrollPolicy.OFF");
				songList.focusEnabled = false;
			}
			
			private function initScrubber():void {
				scrubBarMC = scrubBarLoader.content as MovieClip;
			}
			
			private function updatePlayhead(event:TimerEvent):void {
				currentTime =  Math.round(soundChannelInstance.position/1000);
				if(currentTime < totalTime)
					currentTimeField.text = formatTime(currentTime);	
			}
			
			private function updateScrubber(event:TimerEvent):void {
				var pctPlayed:Number = Math.round((currentTime / totalTime) * 100);
				if(pctPlayed > 0){
					scrubBarMC.gotoAndStop(pctPlayed*5);
				}
			}
			
			private function resetTimeFields():void {
				currentTimeField.text = "0:00";
				totalTimeField.text = "0:00";
				playheadTimer.stop();
				scrubBarTimer.stop();
				scrubBarMC.gotoAndStop(0);
			}
			
			private function formatTime(time:uint):String {
				var timeNum:int = Math.round(time);
				var minutes:int = timeNum / 60;
				var seconds:int = timeNum % 60; 
				var timeString:String;
				var formattedMinutes:String;
				var formattedSeconds:String;
				
				if(seconds < 10) {
					formattedSeconds = "0" + seconds;
				} else {
					formattedSeconds = String(seconds);
				}
				
//				if(minutes < 10) {
//					formattedMinutes = "0" + minutes;
//				} else {
					formattedMinutes = String(minutes);
//				}
				
				timeString = formattedMinutes + ":" + formattedSeconds;
				return timeString;
			}
			
			private function removePauseGraphic(event:ApplicationEvent):void {
				pause.visible = false;
//				startTimers();
			}
			
			private function showPauseGraphic(event:ApplicationEvent):void {
				pause.visible = true;
				pauseTimers();
			}
			
			[Bindable]
			public function get songListViewModel():SongListViewModel {
				return _songListViewModel;
			}
			
			public function set songListViewModel(value:SongListViewModel):void {
				_songListViewModel = value;
			}
			
		]]>
	</fx:Script>
	<s:Group id="controls" right="235" width="353" depth="1">
		<mx:Image id="pause" visible="false" depth="3" horizontalCenter="0"
				  source="@Embed(source='assets/pause.png')"/>
		<s:BorderContainer top="20" width="353" height="23" backgroundAlpha="1"
						   backgroundImage="@Embed(source='assets/controlBackground.png')">
			<s:layout>
				<s:HorizontalLayout gap="8" paddingLeft="9"/>
			</s:layout>
			<s:Label id="currentTimeField" height="23" depth="3" paddingTop="4" styleName="timeLabel"
					 text="0:00" verticalAlign="middle"/>
			<mx:SWFLoader id="scrubBarLoader" width="258" height="23" complete="initScrubber()"
						  depth="2" source="assets/scrubBar.swf"/>
			<s:Label id="totalTimeField" height="23" depth="3" paddingTop="4" styleName="timeLabel"
					 text="0.00" textAlign="right" verticalAlign="middle"/>
		</s:BorderContainer>
	</s:Group>
	<s:List id="songList" maxWidth="1280" minWidth="596"
			dataProvider="{songListViewModel.songList}"
			itemRenderer="com.lnet.pandora.views.SongListItemRenderer"
			borderAlpha="0" borderVisible="false"
			contentBackgroundAlpha="0"
			requireSelection="true" depth="0"
			creationComplete="removeScrollbars()"
			right="117">
		<s:layout>
			<layouts:SongListLayout/>
		</s:layout>
	</s:List>
</s:Group>
