<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="515" height="265" borderAlpha="1" top="67" left="7"
		 creationComplete="init()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.demonsters.debugger.MonsterDebugger;
			import com.lnet.pandora.events.ApplicationEvent;
			import com.lnet.pandora.events.ApplicationEventBus;
			
			import mx.core.FlexGlobals;
			import mx.events.PropertyChangeEvent;
			
			import spark.utils.TextFlowUtil;
			
			private var key:String;
			private var textLoader:URLLoader;
			private var textReq:URLRequest;
			
			private function init():void {
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.INIT_OPTIONS_MENU, setInitialFocus);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.KEY_PRESS_IN_INFO, handleKeyPressInWhyView);
//				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.ARTIST_BIO_LOADED, displayArtistBio);
				ApplicationEventBus.getInstance().addEventListener(ApplicationEvent.TRACK_EXPLANATION_LOADED, trackExplanationLoaded);
			}

			private function trackExplanationLoaded(event:ApplicationEvent):void {
				whyDetailText.text = event.data.toString();
				MonsterDebugger.trace("InfoView::trackExplanationLoaded","Track explanation returned:: "+event.data);
			}

//			private function displayArtistBio(event:ApplicationEvent):void {
//				textLoader = new URLLoader();
//				textReq = new URLRequest(event.data.toString());
//				
//				textLoader.addEventListener(Event.COMPLETE, textLoadComplete);
//				textLoader.load(textReq);
//			}
			
//			private function textLoadComplete(event:Event):void	{
//				MonsterDebugger.trace("InfoView::displayArtistBio","Artist bio returned:: "+textLoader.data);
//				artistBioText.textFlow = spark.utils.TextFlowUtil.importFromString(textLoader.data.toString());
//			}
			
			private function setInitialFocus(event:ApplicationEvent):void {
//				currentState = "bio";
				currentState = "whyDetail";
				scrollerArrow.visible = false;
				whyDetailText.scroller.verticalScrollBar.value = whyDetailText.scroller.verticalScrollBar.minimum;
				ApplicationEventBus.getInstance().dispatchEvent(new ApplicationEvent(ApplicationEvent.EXPLAIN_TRACK));
				MonsterDebugger.trace("InfoView::setInitialFocus","reinitialized bio options");
			}

//			private function handleKeyPress(event:ApplicationEvent):void {
//				key = event.data as String;
//				switch(currentState){
//					case "bio":
//						handleKeyPressInBioView();
//						break;
//					case "why":
//						handleKeyPressInWhyView();
//						break;
//					default:
//						break;
//				}
//			}

//			private function handleKeyPressInBioView():void {
//				switch(key){
//					case "downArrow":
//						currentState = "why";
//						break;
//					case "select":
//						currentState = "bioDetail";
//						ApplicationEventBus.getInstance().dispatchEvent(new ApplicationEvent(ApplicationEvent.GET_ARTIST_BIO));
//						break;
//					default:
//						MonsterDebugger.trace("StationView::handleKeyPress","ERROR:: KEY NOT HANDLED");
//						break;
//				}
//			}
			private function turnOffScrollbars():void {
				whyDetailText.scroller.setStyle("verticalScrollPolicy","off");
				whyDetailText.scroller.viewport.addEventListener( PropertyChangeEvent.PROPERTY_CHANGE, propertyChangeHandler );
			}
			
			private function handleKeyPressInWhyView(event:ApplicationEvent):void {
				key = event.data as String;
				MonsterDebugger.trace("InfoView::handleKeyPressInWhyView","Keypress in info view::"+key);
				switch(key){
					case "downArrow":
						whyDetailText.scroller.verticalScrollBar.value = whyDetailText.scroller.verticalScrollBar.maximum;
						break;
					case "upArrow":
						whyDetailText.scroller.verticalScrollBar.value = whyDetailText.scroller.verticalScrollBar.minimum;
						break;
					default:
						MonsterDebugger.trace("StationView::handleKeyPress","ERROR:: KEY NOT HANDLED");
						break;
				}
			}
			
			private function propertyChangeHandler(event:PropertyChangeEvent):void {
				MonsterDebugger.trace("InfoView::propertyChangeHandler","---------------------------------------------> Scroller changed::"+event.property);
				if(event.property == "contentHeight"){
					MonsterDebugger.trace("InfoView::trackExplanationLoaded","scroller viewport height:::::::::::::::"+whyDetailText.scroller.viewport.height);
					MonsterDebugger.trace("InfoView::trackExplanationLoaded","scroller viewport contentHeight:::::::::::::::"+whyDetailText.scroller.viewport.contentHeight);
					var viewportHeight:int = whyDetailText.scroller.viewport.height;
					var textHeight:int = whyDetailText.scroller.viewport.contentHeight;
					if(textHeight > viewportHeight){
						scrollerArrow.visible = true;
					}
				}
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="bio"/>
		<s:State name="bioDetail" stateGroups="detail"/>
		<s:State name="why"/>
		<s:State name="whyDetail" stateGroups="detail"/>
	</s:states>
	<s:layout>
		<s:HorizontalLayout paddingTop="37" horizontalAlign="center" verticalAlign="middle" gap="10"/>
	</s:layout>
	<!--<s:BorderContainer id="bioDetailView"
					   width="100%" height="100%" 
					   includeIn="bioDetail">
		<s:Label text="Artist Bio" styleName="whiteLabelLg" left="25" top="-15"/>
		<s:TextArea id="artistBioText" verticalScrollPolicy="off" width="460" height="200" styleName="whiteLabelSmall" left="40" focusAlpha="0"
	contentBackgroundAlpha="0" borderVisible="false" borderAlpha="0" top="15"/>
	</s:BorderContainer>-->
	<s:VGroup>
		<s:BorderContainer id="whyDetailView"
						   width="100%" height="100%" 
						   includeIn="whyDetail">
			<s:Label text="Why Was This Song Selected?" styleName="whiteLabelLg" left="25" top="-15"/>
			<s:TextArea id="whyDetailText" width="460" height="198" styleName="whiteLabelSmall"
					 left="40" top="15" focusAlpha="0" contentBackgroundAlpha="0" editable="false" borderVisible="false" creationComplete="turnOffScrollbars()"/>
		</s:BorderContainer>
	</s:VGroup>
	<mx:Image id="scrollerArrow" visible="false" source="@Embed(source='assets/scroller.png')" depth="100" left="100"/>
	<!--<s:Label text="Artist Bio" styleName="whiteLabelLg" alpha.why=".2" excludeFrom="detail">
		<s:filters>
			<s:GlowFilter includeIn="bio"
						  color="#2f97ff"
						  alpha="0.5"
						  blurX="11" blurY="11"
						  inner="false"
						  strength="6"
						  quality="1"/>
		</s:filters>
	</s:Label>	
	<mx:Image source="@Embed(source='assets/option_divider.png')" includeIn="bio"/>
	<s:Label text="Why Was This Song Selected?" styleName="whiteLabelLg" alpha.bio=".2" excludeFrom="detail">
		<s:filters>
			<s:GlowFilter includeIn="why"
						  color="#2f97ff"
						  alpha="0.5"
						  blurX="11" blurY="11"
						  inner="false"
						  strength="6"
						  quality="1"/>
		</s:filters>
	</s:Label>
	<mx:Image source="@Embed(source='assets/option_divider.png')" includeIn="why"/>-->
</s:BorderContainer>
